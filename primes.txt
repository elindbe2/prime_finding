import time

class Timer(object):

	def __init__(self, msg):
		self.msg = msg
	
	def __enter__(self):
		self.start = time.clock()

	def __exit__(self, *args):
		self.end = time.clock()
		self.interval = self.end - self.start
		print '{msg}: {interval}'.format(msg=self.msg, interval=self.interval)


def isprime(p):
	for i in range(2,p):
		if p % i == 0:
			return False
	return True


def find_primes(numPrimes):
	ps = []
	i = 2
	while( len(ps) < numPrimes ):
		if isprime(i):
			ps.append(i)
		i = i + 1	
	return ps

class Sieve(object):

	ns = []

	def find_primes_below(self, maxNum):
		self.ns = self.ns + range(len(self.ns),maxNum)
		i = 2
		while i < len(self.ns):
			n = self.ns[i]
			if n == 0:
				i = i + 1
				continue
			for k in range(2*i,maxNum,i):
				self.ns[k] = 0
			i = i + 1
		return filter(lambda x: x > 1, self.ns)

def find_primes2(numPrimes):
	s = Sieve()
	n = numPrimes	
	ps = []
	while(len(ps) < numPrimes):
		ps = s.find_primes_below(n)
		n = n*n
	return ps[:numPrimes]

	
with Timer('find_primes'):
	ps = find_primes(1000)
print ps

with Timer('find_primes2'):
	ps = find_primes2(1000)
print ps
